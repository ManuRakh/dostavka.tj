const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');

dotenv.config();

const token = process.env.TG_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const groupId = process.env.GROUP_ID;

const chatData = {};
const languages = ["üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üáπüáØ –¢–∞–¥–∂–∏–∫—Å–∫–∏–π"];

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞.";

    bot.sendMessage(chatId, welcomeMessage);

    chatData[chatId] = { state: 'chooseLanguage' };

    sendLanguageSelection(chatId);
});


bot.on('message', (msg) => {

    const chatId = msg.chat.id;
    const messageText = msg.text;

    let { state } = chatData[chatId] || {};
    if (!state && messageText) {
        console.log({messageText}, languages.includes(messageText))
        if (languages.includes(messageText)) {
            state = "chooseLanguage";
        }
    }
    console.log({state, messageText});
    if (state === "chooseLanguage") {
        if (!chatData[chatId]) chatData[chatId] = {};
        chatData[chatId].language = messageText;
    }
    if (state === "provideName") {
        chatData[chatId].author_name = messageText;
    }
    if (state === "providePhoneNumber") {
        chatData[chatId].author_phone = messageText;
    }
    if (state === "provideReceiverAddress") {
        chatData[chatId].receiver_phone = messageText;
    }
    if (state === "provideSenderAddress") {
        chatData[chatId].sender_address = messageText;
    }
    if (state === "provideRecipientAddress") {
        chatData[chatId].receipent_address = messageText;
    }
    if (state === "chooseWeightAndOptions") {
        chatData[chatId].options = messageText;
    }
    if (state === "chooseDeliveryTime") {
        chatData[chatId].time = messageText;
    }
    switch (state) {
        case 'chooseLanguage':
            processLanguageSelection(chatId, messageText);
            break;
        case 'provideName':
            processNameProviding(chatId, messageText);
            break;
        case 'providePhoneNumber':
            processPhoneNumberProviding(chatId, messageText);
            break;
        case 'provideReceiverAddress': 
            processReceiverPhoneNumber(chatId, messageText);
            break;
        case 'provideSenderAddress':
            processSenderAddressProviding(chatId, messageText);
            break;
        case 'provideRecipientAddress':
            processRecipientAddressProviding(chatId, messageText);
            break;
        case 'chooseWeightAndOptions':
            processWeightAndOptionsSelection(chatId, messageText);
            break;
        case 'chooseDeliveryTime':
            processDeliveryTimeSelection(chatId, messageText);
            break;
        case 'completeOrder': 
            processCompleteOrder(chatId);
            break;

        default:
            break;
    }
});

function sendLanguageSelection(chatId) {
    const languageOptions = [
        [{ text: 'üáπüáØ –¢–∞–¥–∂–∏–∫—Å–∫–∏–π' }, { text: 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π' }, { text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' }]
    ];
    const opts = {
        reply_markup: JSON.stringify({
            keyboard: languageOptions,
            resize_keyboard: true
        })
    };
    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", opts);
}

function processLanguageSelection(chatId, language) {
    chatData[chatId].state = 'provideName';
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", {
        reply_markup: {
            keyboard: [['–í –Ω–∞—á–∞–ª–æ']],
            resize_keyboard: true
        }
    });
}

function processNameProviding(chatId, name) {
    chatData[chatId].state = 'providePhoneNumber';
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",{
        reply_markup: {
            keyboard: [['–í –Ω–∞—á–∞–ª–æ']],
            resize_keyboard: true
        }
    });
}

function processPhoneNumberProviding(chatId, phoneNumber) {
    chatData[chatId].state = 'provideReceiverAddress';
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", {
        reply_markup: {
            keyboard: [['–í –Ω–∞—á–∞–ª–æ']],
            resize_keyboard: true
        }
    });
}

function processReceiverPhoneNumber(chatId, phoneNumber) {
    chatData[chatId].state = 'provideSenderAddress';
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", {
        reply_markup: {
            keyboard: [['–í –Ω–∞—á–∞–ª–æ']],
            resize_keyboard: true
        }
    });
}

function processSenderAddressProviding(chatId, senderAddress) {
    chatData[chatId].state = 'provideRecipientAddress';
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", {
        reply_markup: {
            keyboard: [['–í –Ω–∞—á–∞–ª–æ']],
            resize_keyboard: true
        }
    });
}

function processRecipientAddressProviding(chatId, recipientAddress) {
    chatData[chatId].state = 'chooseWeightAndOptions';
    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å –∏ –æ–ø—Ü–∏–∏:", {
        reply_markup: {
            keyboard: [['–í –Ω–∞—á–∞–ª–æ']],
            resize_keyboard: true
        }
    });
}

function processWeightAndOptionsSelection(chatId, weightAndOptions) {
    chatData[chatId].state = 'chooseDeliveryTime';
    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:", {
        reply_markup: {
            keyboard: [['–í –Ω–∞—á–∞–ª–æ']],
            resize_keyboard: true
        }
    });
}

function processDeliveryTimeSelection(chatId, deliveryTime) {
    chatData[chatId].state = 'completeOrder';
    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:");
    const sendingMessage = generateSendingMessage(chatData[chatId]);
    const speedingMessage = `–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–º —Ç–µ–º–ø–µ
    –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É 888110073
`
    bot.sendMessage(chatId, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
        ${sendingMessage}
        ${speedingMessage}
    `, {
        reply_markup: {
            keyboard: [['–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é']],
            resize_keyboard: true
        }
    });
}

function processCompleteOrder(chatId, deliveryTime) {
    bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.", {
        reply_markup: {
            keyboard: [['–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑']],
            resize_keyboard: true
        }
    });
    
    sendMessageToGroup((chatData[chatId]));

    delete chatData[chatId];
}

bot.onText(/–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑/, (msg) => {
    bot.sendMessage(msg.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.");
    chatData[msg.chat.id] = { state: 'chooseLanguage' };
    sendLanguageSelection(msg.chat.id);
});

bot.onText(/–í –Ω–∞—á–∞–ª–æ/, (msg) => {
    bot.sendMessage(msg.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.");

    chatData[msg.chat.id] = { state: 'chooseLanguage' };
    sendLanguageSelection(msg.chat.id);
});

function generateSendingMessage (message) {
    const { language, author_name, author_phone, receiver_phone, receipent_address, options, time, sender_address, price = 20 } = message;

    const sendingMessage = `
    –Ø–∑—ã–∫: ${language},
    –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${author_name},
    –ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${author_phone},
    –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${sender_address},
    –ù–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${receiver_phone},
    –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞–µ—Ç–µ–ª—è: ${receipent_address},
    –í—Ä–µ–º—è: ${time},
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${options},
    –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${price} —Å–æ–º–æ–Ω–∏. 
    `

    return sendingMessage;
};

function sendMessageToGroup(message) {
    const sendingMessage = generateSendingMessage(message);
    bot.sendMessage(groupId, sendingMessage);
}